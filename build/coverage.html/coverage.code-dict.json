{"/home/travis/build/npmtest/node-npmtest-dss/test.js":"/* istanbul instrument in package npmtest_dss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dss/lib.npmtest_dss.js":"/* istanbul instrument in package npmtest_dss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_dss = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_dss = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-dss/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-dss && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_dss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_dss\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_dss.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_dss.rollup.js'] =\n            local.assetsDict['/assets.npmtest_dss.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_dss.__dirname + '/lib.npmtest_dss.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dss/node_modules/dss/dss.js":"// DSS Object\nvar dss = (function(){\n\n  // Store reference\n  var _dss = function(){};\n\n  // Default detect function\n  _dss.detect = function(){\n    return true;\n  };\n\n  /*\n   * Modify detector method\n   *\n   * @param (Function) The callback to be used to detect variables\n   */\n  _dss.detector = function(callback){\n    _dss.detect = callback;\n  };\n\n  // Store parsers\n  _dss.parsers = {};\n\n  /*\n   * Add a parser for a specific variable\n   *\n   * @param (String) The name of the variable\n   * @param (Function) The callback to be executed at parse time\n   */\n  _dss.parser = function(name, callback){\n    _dss.parsers[name] = callback;\n  };\n\n  /*\n   * Trim whitespace from string\n   *\n   * @param (String) The string to be trimmed\n   * @return (String) The trimmed string\n   */\n  _dss.trim = function(str, arr){\n    var defaults = [ /^\\s\\s*/, /\\s\\s*$/ ];\n    arr = (_dss.isArray(arr)) ? arr.concat(defaults) : defaults;\n    arr.forEach(function(regEx){\n      str = str.replace(regEx, '');\n    });\n    return str;\n  };\n\n  /*\n   * Check if object is an array\n   *\n   * @param (Object) The object to check\n   * @return (Boolean) The result of the test\n   */\n  _dss.isArray = function(obj){\n    return toString.call(obj) == '[object Array]';\n  };\n\n  /*\n   * Check the size of an object\n   *\n   * @param (Object) The object to check\n   * @return (Boolean) The result of the test\n   */\n  _dss.size = function(obj){\n    var size = 0;\n    for(var key in obj){\n      if(Object.prototype.hasOwnProperty.call(obj, key))\n        size++;\n    }\n    return size;\n  };\n\n  /*\n   * Iterate over an object\n   *\n   * @param (Object) The object to iterate over\n   * @param (Function) Callback function to use when iterating\n   * @param (Object) Optional context to pass to iterator\n   */\n  _dss.each = function(obj, iterator, context){\n    if(obj == null) return;\n    if(obj.length === +obj.length){\n      for(var i = 0, l = obj.length; i < l; i++){\n        if(iterator.call(context, obj[i], i, obj) === {}) return;\n      }\n    } else {\n      for(var key in obj){\n        if(_.has(obj, key)){\n          if(iterator.call(context, obj[key], key, obj) === {}) return;\n        }\n      }\n    }\n  };\n\n  /*\n   * Extend an object\n   *\n   * @param (Object) The object to extend\n   */\n  _dss.extend = function(obj){\n    _dss.each(Array.prototype.slice.call(arguments, 1), function(source){\n      if(source){\n        for(var prop in source){\n          obj[prop] = source[prop];\n        }\n      }\n    });\n    return obj;\n  };\n\n  /*\n   * Squeeze unnecessary extra characters/string\n   *\n   * @param (String) The string to be squeeze\n   * @param (String) The string to be matched\n   * @return (String) The modified string\n   */\n  _dss.squeeze = function(str, def){\n    return str.replace(/\\s{2,}/g, def);\n  };\n\n  /*\n   * Normalizes the comment block to ignore any consistent preceding\n   * whitespace. Consistent means the same amount of whitespace on every line\n   * of the comment block. Also strips any whitespace at the start and end of\n   * the whole block.\n   *\n   * @param (String) Text block\n   * @return (String) A cleaned up text block\n   */\n  _dss.normalize = function(text_block){\n    \n    // Strip out any preceding [whitespace]* that occur on every line. Not\n    // the smartest, but I wonder if I care.\n    text_block = text_block.replace(/^(\\s*\\*+)/, '');\n\n    // Strip consistent indenting by measuring first line's whitespace\n    var indent_size = false;\n    var unindented = (function(lines){\n      return lines.map(function(line){\n        var preceding_whitespace = line.match(/^\\s*/)[0].length;\n        if(!indent_size)\n          indent_size = preceding_whitespace;\n        if(line == ''){\n          return '';\n        } else if(indent_size <= preceding_whitespace && indent_size > 0){\n          return line.slice(indent_size, (line.length - 1));\n        } else {\n          return line;\n        }\n      }).join(\"\\n\");\n    })(text_block.split(\"\\n\"));\n\n    return _dss.trim(text_block);\n\n  };\n\n  /*\n   * Takes a file and extracts comments from it.\n   *\n   * @param (Object) options\n   * @param (Function) callback\n   */\n  _dss.parse = function(lines, options, callback){\n\n    // Options\n    options = (options) ? options : {};\n    options.preserve_whitespace = !!(options.preserve_whitespace);\n\n    // Setup\n    var _this = this,\n        current_block = '',\n        inside_single_line_block = false,\n        inside_multi_line_block = false,\n        last_line = '',\n        start = \"{start}\",\n        end = \"{/end}\",\n        _parsed = false,\n        _blocks = [],\n        parsed = '',\n        blocks = [],\n        temp = {},\n        lineNum = 0;\n\n    /*\n     * Parses line\n     *\n     * @param (Num) the line number\n     * @param (Num) number of lines\n     * @param (String) line to parse/check\n     * @return (Boolean) result of parsing\n     */\n    var parser = function(temp, line, block, file){\n      var indexer = function(str, find){\n            return (str.indexOf(find) > 0) ? str.indexOf(find) : false;\n          },\n          parts = line.replace(/.*@/, ''),\n          i = indexer(parts, ' ') || indexer(parts, '\\n') || indexer(parts, '\\r') || parts.length,\n          name = _dss.trim(parts.substr(0, i)),\n          description = _dss.trim(parts.substr(i)),\n          variable = _dss.parsers[name],\n          index = block.indexOf(line);\n      line = {};\n      line[name] = (variable) ? variable.apply(null, [index, description, block, file]) : '';\n\n      if(temp[name]){\n        if(!_dss.isArray(temp[name]))\n          temp[name] = [ temp[name] ];\n        temp[name].push(line[name]);\n      } else {\n        temp = _dss.extend(temp, line);\n      }\n      return temp;\n    };\n\n    /*\n     * Comment block\n     */\n    var block = function(){\n      this._raw = (comment_text) ? comment_text : '';\n      this._filename = filename;\n    };\n\n    /*\n     * Check for single-line comment\n     *\n     * @param (String) line to parse/check\n     * @return (Boolean) result of check\n     */\n    var single_line_comment = function(line){\n      return !!line.match(/^\\s*\\/\\//);\n    };\n\n    /*\n     * Checks for start of a multi-line comment\n     *\n     * @param (String) line to parse/check\n     * @return (Boolean) result of check\n     */\n    var start_multi_line_comment = function(line){\n      return !!line.match(/^\\s*\\/\\*/);\n    };\n\n    /*\n     * Check for end of a multi-line comment\n     *\n     * @parse (String) line to parse/check\n     * @return (Boolean) result of check\n     */\n    var end_multi_line_comment = function(line){\n      if(single_line_comment(line))\n        return false;\n      return !!line.match(/.*\\*\\//);\n    };\n\n    /*\n     * Removes comment identifiers for single-line comments.\n     *\n     * @param (String) line to parse/check\n     * @return (Boolean) result of check\n     */\n    var parse_single_line = function(line){\n      return line.replace(/\\s*\\/\\//, '');\n    };\n\n    /*\n     * Remove comment identifiers for multi-line comments.\n     *\n     * @param (String) line to parse/check\n     * @return (Boolean) result of check\n     */\n    var parse_multi_line = function(line){\n      var cleaned = line.replace(/\\s*\\/\\*/, '');\n      return cleaned.replace(/\\*\\//, '');\n    };\n\n    lines = lines + '';\n    lines.split(/\\n/).forEach(function(line){\n\n      lineNum = lineNum + 1;\n      line = line + '';\n\n      // Parse Single line comment\n      if(single_line_comment(line)){\n        parsed = parse_single_line(line);\n        if(inside_single_line_block){\n          current_block += '\\n' + parsed;\n        } else {\n          current_block = parsed;\n          inside_single_line_block = true;\n        }\n      }\n\n      // Parse multi-line comments\n      if(start_multi_line_comment(line) || inside_multi_line_block){\n        parsed = parse_multi_line(line);\n        if(inside_multi_line_block){\n          current_block += '\\n' + parsed;\n        } else {\n          current_block += parsed;\n          inside_multi_line_block = true;\n        }\n      }\n\n      // End a multi-line block\n      if(end_multi_line_comment(line)){\n        inside_multi_line_block = false;\n      }\n\n      // Store current block if done\n      if(!single_line_comment(line) && !inside_multi_line_block){\n        if(current_block){\n          _blocks.push(_dss.normalize(current_block));\n        }\n        inside_single_line_block = false;\n        current_block = '';\n        last_line = '';\n      }\n\n    });\n\n    // Done first pass\n    _parsed = true;\n\n    // Create new blocks with custom parsing\n    _blocks.forEach(function(block){\n\n      // Remove extra whitespace\n      block = block.split('\\n').filter(function(line){\n        return (_dss.trim(_dss.normalize(line)));\n      }).join('\\n');\n\n      // Split block into lines\n      block.split('\\n').forEach(function(line){\n        if(_dss.detect(line))\n          temp = parser(temp, _dss.normalize(line), block, lines);\n      });\n      \n      // Push to blocks if object isn't empty\n      if(_dss.size(temp))\n        blocks.push(temp);\n      temp = {};\n\n    }); \n            \n    // Execute callback with filename and blocks\n    callback({ blocks: blocks });\n\n  };\n\n  // Return function\n  return _dss;\n\n})();\n\n// Describe detection pattern\ndss.detector(function(line){\n  if(typeof line !== 'string')\n    return false;\n  var reference = line.split(\"\\n\\n\").pop();\n  return !!reference.match(/.*@/);\n});\n\n// Describe parsing a name\ndss.parser('name', function(i, line, block, file){\n  return line;\n});\n\n// Describe parsing a description\ndss.parser('description', function(i, line, block, file){\n  return line;\n});\n\n// Describe parsing a state\ndss.parser('state', function(i, line, block, file){\n  var state = line.split(' - ');\n  return {\n    name: (state[0]) ? dss.trim(state[0]) : '',\n    escaped: (state[0]) ? dss.trim(state[0].replace('.', ' ').replace(':', ' pseudo-class-')) : '',\n    description: (state[1]) ? dss.trim(state[1]) : ''\n  };\n});\n\n// Describe parsing markup\ndss.parser('markup', function(i, line, block, file){\n\n  // find the next instance of a parser (if there is one based on the @ symbol)\n  // in order to isolate the current multi-line parser\n  var nextParserIndex = block.indexOf('* @', i+1),\n      markupLength = nextParserIndex > -1 ? nextParserIndex - i : block.length,\n      markup = block.split('').splice(i, markupLength).join('');\n\n  markup = (function(markup){\n    var ret = [],\n        lines = markup.split('\\n');\n\n    lines.forEach(function(line){\n      var pattern = '*',\n          index = line.indexOf(pattern);\n\n      if (index > 0 && index < 10)\n        line = line.split('').splice((index + pattern.length), line.length).join('');\n\n      // multiline\n      if (lines.length <= 2)\n        line = dss.trim(line);\n\n      if (line && line != '@markup')\n        ret.push(line);\n\n    });\n    return ret.join('\\n');\n  })(markup);\n\n  return {\n    example: markup,\n    escaped: markup.replace(/</g, '&lt;').replace(/>/g, '&gt;')\n  };\n});\n\n// Module exports\nif(typeof exports !== 'undefined'){\n  if(typeof module !== 'undefined' && module.exports){\n    exports = module.exports = dss;\n  }\n  exports.dss = dss;\n} else {\n  root['dss'] = dss;\n}\n\n// AMD definition\nif (typeof define === 'function' && define.amd){\n  define(function(require){\n    return dss;\n  });\n}\n"}